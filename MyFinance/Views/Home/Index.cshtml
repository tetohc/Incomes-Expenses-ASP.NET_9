@using MyFinance.Models.Enums
@model MyFinance.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Inicio";
}

<div id="subheader-container"></div>

<div class="container py-4">
    <h2 class="text-center mb-4 dashboard-title">📊 Control de ingresos y gastos</h2>

    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="card card-metric bg-ingresos shadow-sm">
                <h6 class="text-uppercase">Total Ingresos</h6>
                <h3>₡ @Model.TotalIncome</h3>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-metric bg-gastos shadow-sm">
                <h6 class="text-uppercase">Total Gastos</h6>
                <h3>₡ @Model.TotalExpenses</h3>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card card-metric bg-ganancia shadow-sm">
                <h6 class="text-uppercase">Balance</h6>
                <h3>₡ @Model.Balance</h3>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow-sm p-3">
                <h5 class="section-title mb-3">📊 Distribución por Categoría</h5>
                <canvas id="chart-categorias" width="400" height="400"></canvas>
                <p class="text-muted mt-3">* El gráfico representa la proporción de ingresos por categoría.</p>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-sm p-3">
                <h5 class="section-title mb-3">🏆 Últimos movimientos</h5>
                <ul class="list-group list-group-flush">
                    @foreach (var item in Model.RecentTransactions)
                    {
                        var badgeClass = item.Type == (int)ServiceType.Income ? "bg-success" : "bg-danger";
                        var iconClass = item.Type == (int)ServiceType.Income ? "bi bi-arrow-down-circle" : "bi bi-arrow-up-circle";
                        var tipoTexto = item.Type == (int)ServiceType.Income ? "Ingreso" : "Gasto";

                        <li class="list-group-item list-group-item-custom d-flex justify-content-between align-items-center">
                            <span>
                                <i class="@iconClass me-2"></i> @item.Description
                                <small class="text-muted d-block">📅 @item.Date.ToString("dd/MM/yyyy hh:mm tt") — @tipoTexto</small>
                            </span>
                            <span class="badge @badgeClass rounded-pill">₡@item.Amount.ToString("N0")</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/Home/Index.js"></script>
    <script src="~/js/Shared/UiComponents.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        const chartCategorias = document.getElementById('chart-categorias');

        const data = {
          labels: @Html.Raw(Json.Serialize(Model.IncomeByCategory.Select(c => c.CategoryName))),
          datasets: [{
            label: 'Distribución de ingresos',
            data: @Html.Raw(Json.Serialize(Model.IncomeByCategory.Select(c => c.Percentage))),
            backgroundColor: [
              '#198754', '#dc3545', '#ffc107', '#0dcaf0', '#6f42c1', '#20c997'
            ],
            borderWidth: 1
          }]
        };

        const config = {
          type: 'pie',
          data: data,
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'top' },
              title: {
                display: true,
                text: 'Ingresos por categoría'
              }
            }
          }
        };

        new Chart(chartCategorias, config);
    </script>
}
